{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Linear Algebra Operations in Python"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy        as np\n",
    "import scipy.linalg as la\n",
    "import sympy        as sm\n",
    "sm.init_printing()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reduced Row Echelon Form (RREF)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 1 (p135; Intro2LA 4ed 2009; Gilbert Strang)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}1 & 1 & 2 & 3\\\\2 & 2 & 8 & 10\\\\3 & 3 & 10 & 13\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡1  1  2   3 ⎤\n",
       "⎢            ⎥\n",
       "⎢2  2  8   10⎥\n",
       "⎢            ⎥\n",
       "⎣3  3  10  13⎦"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = sm.Matrix([\n",
    "    [1, 1,  2,  3],\n",
    "    [2, 2,  8, 10],\n",
    "    [3, 3, 10, 13]\n",
    "])\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left ( \\left[\\begin{matrix}1 & 1 & 0 & 1\\\\0 & 0 & 1 & 1\\\\0 & 0 & 0 & 0\\end{matrix}\\right], \\quad \\left ( 0, \\quad 2\\right )\\right )$$"
      ],
      "text/plain": [
       "⎛⎡1  1  0  1⎤        ⎞\n",
       "⎜⎢          ⎥        ⎟\n",
       "⎜⎢0  0  1  1⎥, (0, 2)⎟\n",
       "⎜⎢          ⎥        ⎟\n",
       "⎝⎣0  0  0  0⎦        ⎠"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.rref()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 2 (p144, Intro2LA 4ed 2009; Gilbert Strang)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}1 & 1 & 2 & 4\\\\1 & 2 & 2 & 5\\\\1 & 3 & 2 & 6\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡1  1  2  4⎤\n",
       "⎢          ⎥\n",
       "⎢1  2  2  5⎥\n",
       "⎢          ⎥\n",
       "⎣1  3  2  6⎦"
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = sm.Matrix([\n",
    "    [1, 1, 2, 4],\n",
    "    [1, 2, 2, 5],\n",
    "    [1, 3, 2, 6]\n",
    "])\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left ( \\left[\\begin{matrix}1 & 0 & 2 & 3\\\\0 & 1 & 0 & 1\\\\0 & 0 & 0 & 0\\end{matrix}\\right], \\quad \\left ( 0, \\quad 1\\right )\\right )$$"
      ],
      "text/plain": [
       "⎛⎡1  0  2  3⎤        ⎞\n",
       "⎜⎢          ⎥        ⎟\n",
       "⎜⎢0  1  0  1⎥, (0, 1)⎟\n",
       "⎜⎢          ⎥        ⎟\n",
       "⎝⎣0  0  0  0⎦        ⎠"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.rref()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left ( \\left[\\begin{matrix}1 & 0 & 0\\\\1 & 1 & 0\\\\1 & 2 & 1\\end{matrix}\\right], \\quad \\left[\\begin{matrix}1 & 1 & 2 & 4\\\\0 & 1 & 0 & 1\\\\0 & 0 & 0 & 0\\end{matrix}\\right], \\quad \\left [ \\right ]\\right )$$"
      ],
      "text/plain": [
       "⎛⎡1  0  0⎤  ⎡1  1  2  4⎤    ⎞\n",
       "⎜⎢       ⎥  ⎢          ⎥    ⎟\n",
       "⎜⎢1  1  0⎥, ⎢0  1  0  1⎥, []⎟\n",
       "⎜⎢       ⎥  ⎢          ⎥    ⎟\n",
       "⎝⎣1  2  1⎦  ⎣0  0  0  0⎦    ⎠"
      ]
     },
     "execution_count": 74,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L, U, _ = A.LUdecomposition()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Solve"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example (Ch3.4; p155; Intro2LA 4ed; Gilbert Strang)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}1 & 3 & 0 & 2\\\\0 & 0 & 1 & 4\\\\1 & 3 & 1 & 6\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡1  3  0  2⎤\n",
       "⎢          ⎥\n",
       "⎢0  0  1  4⎥\n",
       "⎢          ⎥\n",
       "⎣1  3  1  6⎦"
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = sm.Matrix([\n",
    "    [1, 3, 0, 2],\n",
    "    [0, 0, 1, 4],\n",
    "    [1, 3, 1, 6]\n",
    "])\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}1 & 3 & 0 & 2 & 1\\\\0 & 0 & 1 & 4 & 6\\\\1 & 3 & 1 & 6 & 7\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡1  3  0  2  1⎤\n",
       "⎢             ⎥\n",
       "⎢0  0  1  4  6⎥\n",
       "⎢             ⎥\n",
       "⎣1  3  1  6  7⎦"
      ]
     },
     "execution_count": 79,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = sm.Matrix([\n",
    "    [1, 3, 0, 2, 1],\n",
    "    [0, 0, 1, 4, 6],\n",
    "    [1, 3, 1, 6, 7]\n",
    "])\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left ( \\left[\\begin{matrix}1 & 3 & 0 & 2 & 1\\\\0 & 0 & 1 & 4 & 6\\\\0 & 0 & 0 & 0 & 0\\end{matrix}\\right], \\quad \\left ( 0, \\quad 2\\right )\\right )$$"
      ],
      "text/plain": [
       "⎛⎡1  3  0  2  1⎤        ⎞\n",
       "⎜⎢             ⎥        ⎟\n",
       "⎜⎢0  0  1  4  6⎥, (0, 2)⎟\n",
       "⎜⎢             ⎥        ⎟\n",
       "⎝⎣0  0  0  0  0⎦        ⎠"
      ]
     },
     "execution_count": 80,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.rref()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Matrix Inverse (w/ RREF)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Using RREF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left ( \\left[\\begin{matrix}1 & 0 & 0 & \\frac{3}{4} & \\frac{1}{2} & \\frac{1}{4}\\\\0 & 1 & 0 & \\frac{1}{2} & 1 & \\frac{1}{2}\\\\0 & 0 & 1 & \\frac{1}{4} & \\frac{1}{2} & \\frac{3}{4}\\end{matrix}\\right], \\quad \\left ( 0, \\quad 1, \\quad 2\\right )\\right )$$"
      ],
      "text/plain": [
       "⎛⎡1  0  0  3/4  1/2  1/4⎤           ⎞\n",
       "⎜⎢                      ⎥           ⎟\n",
       "⎜⎢0  1  0  1/2   1   1/2⎥, (0, 1, 2)⎟\n",
       "⎜⎢                      ⎥           ⎟\n",
       "⎝⎣0  0  1  1/4  1/2  3/4⎦           ⎠"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = sm.Matrix([\n",
    "    [ 2, -1,  0, 1, 0, 0], \n",
    "    [-1,  2, -1, 0, 1, 0], \n",
    "    [ 0, -1,  2, 0, 0, 1]])\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left ( \\left[\\begin{matrix}1 & 0 & 0 & \\frac{3}{4} & \\frac{1}{2} & \\frac{1}{4}\\\\0 & 1 & 0 & \\frac{1}{2} & 1 & \\frac{1}{2}\\\\0 & 0 & 1 & \\frac{1}{4} & \\frac{1}{2} & \\frac{3}{4}\\end{matrix}\\right], \\quad \\left ( 0, \\quad 1, \\quad 2\\right )\\right )$$"
      ],
      "text/plain": [
       "⎛⎡1  0  0  3/4  1/2  1/4⎤           ⎞\n",
       "⎜⎢                      ⎥           ⎟\n",
       "⎜⎢0  1  0  1/2   1   1/2⎥, (0, 1, 2)⎟\n",
       "⎜⎢                      ⎥           ⎟\n",
       "⎝⎣0  0  1  1/4  1/2  3/4⎦           ⎠"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.rref()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### inverse (SymPy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}2 & -1 & 0\\\\-1 & 2 & -1\\\\0 & -1 & 2\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡2   -1  0 ⎤\n",
       "⎢          ⎥\n",
       "⎢-1  2   -1⎥\n",
       "⎢          ⎥\n",
       "⎣0   -1  2 ⎦"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = sm.Matrix([\n",
    "    [ 2, -1,  0], \n",
    "    [-1,  2, -1], \n",
    "    [ 0, -1,  2]])\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}\\frac{3}{4} & \\frac{1}{2} & \\frac{1}{4}\\\\\\frac{1}{2} & 1 & \\frac{1}{2}\\\\\\frac{1}{4} & \\frac{1}{2} & \\frac{3}{4}\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡3/4  1/2  1/4⎤\n",
       "⎢             ⎥\n",
       "⎢1/2   1   1/2⎥\n",
       "⎢             ⎥\n",
       "⎣1/4  1/2  3/4⎦"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A**-1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### inverse (Numpy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 2 -1  0]\n",
      " [-1  2 -1]\n",
      " [ 0 -1  2]]\n"
     ]
    }
   ],
   "source": [
    "A = np.array([\n",
    "    [ 2, -1,  0], \n",
    "    [-1,  2, -1], \n",
    "    [ 0, -1,  2]])\n",
    "print(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.75, 0.5 , 0.25],\n",
       "       [0.5 , 1.  , 0.5 ],\n",
       "       [0.25, 0.5 , 0.75]])"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "la.inv(A)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Using RREF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}1 & 0 & 0 & 1 & 0 & 0\\\\3 & 1 & 0 & 0 & 1 & 0\\\\4 & 5 & 1 & 0 & 0 & 1\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡1  0  0  1  0  0⎤\n",
       "⎢                ⎥\n",
       "⎢3  1  0  0  1  0⎥\n",
       "⎢                ⎥\n",
       "⎣4  5  1  0  0  1⎦"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = sm.Matrix([\n",
    "    [ 1,  0,  0, 1, 0, 0], \n",
    "    [ 3,  1,  0, 0, 1, 0], \n",
    "    [ 4,  5,  1, 0, 0, 1]])\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left ( \\left[\\begin{matrix}1 & 0 & 0 & 1 & 0 & 0\\\\0 & 1 & 0 & -3 & 1 & 0\\\\0 & 0 & 1 & 11 & -5 & 1\\end{matrix}\\right], \\quad \\left ( 0, \\quad 1, \\quad 2\\right )\\right )$$"
      ],
      "text/plain": [
       "⎛⎡1  0  0  1   0   0⎤           ⎞\n",
       "⎜⎢                  ⎥           ⎟\n",
       "⎜⎢0  1  0  -3  1   0⎥, (0, 1, 2)⎟\n",
       "⎜⎢                  ⎥           ⎟\n",
       "⎝⎣0  0  1  11  -5  1⎦           ⎠"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.rref()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Inverse (SymPy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}1 & 0 & 0\\\\3 & 1 & 0\\\\4 & 5 & 1\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡1  0  0⎤\n",
       "⎢       ⎥\n",
       "⎢3  1  0⎥\n",
       "⎢       ⎥\n",
       "⎣4  5  1⎦"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = sm.Matrix([\n",
    "    [ 1,  0,  0], \n",
    "    [ 3,  1,  0], \n",
    "    [ 4,  5,  1]])\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}1 & 0 & 0\\\\-3 & 1 & 0\\\\11 & -5 & 1\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡1   0   0⎤\n",
       "⎢         ⎥\n",
       "⎢-3  1   0⎥\n",
       "⎢         ⎥\n",
       "⎣11  -5  1⎦"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A**-1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Inverse (NumPy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[ 2 -1  0]\n",
      " [-1  2 -1]\n",
      " [ 0 -1  2]]\n"
     ]
    }
   ],
   "source": [
    "A = np.array([\n",
    "    [ 2, -1,  0], \n",
    "    [-1,  2, -1], \n",
    "    [ 0, -1,  2]])\n",
    "print(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.75, 0.5 , 0.25],\n",
       "       [0.5 , 1.  , 0.5 ],\n",
       "       [0.25, 0.5 , 0.75]])"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "la.inv(A)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 3: upper triagular matrix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}1 & x & y\\\\0 & 1 & z\\\\0 & 0 & 1\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡1  x  y⎤\n",
       "⎢       ⎥\n",
       "⎢0  1  z⎥\n",
       "⎢       ⎥\n",
       "⎣0  0  1⎦"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x, y, z = sm.symbols(\"x y z\")\n",
    "A = sm.Matrix([\n",
    "    [ 1,  x,  y], \n",
    "    [ 0,  1,  z], \n",
    "    [ 0,  0,  1]])\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}1 & - x & x z - y\\\\0 & 1 & - z\\\\0 & 0 & 1\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡1  -x  x⋅z - y⎤\n",
       "⎢              ⎥\n",
       "⎢0  1     -z   ⎥\n",
       "⎢              ⎥\n",
       "⎣0  0      1   ⎦"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A**-1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## LU decomposition"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$A\n",
    "= \\begin{bmatrix} 2 & 1 & 0 \\\\ 1   & 2   & 1 \\\\ 0 & 1   & 2   \\end{bmatrix}\n",
    "= \\begin{bmatrix} 1 & 0 & 0 \\\\ 1/2 & 1   & 0 \\\\ 0 & 2/3 & 1   \\end{bmatrix}\n",
    "  \\begin{bmatrix} 2 & 1 & 0 \\\\ 0   & 3/2 & 1 \\\\ 0 & 0   & 4/3 \\end{bmatrix}\n",
    "= LU\n",
    "$$"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import scipy.linalg as la"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[2 1 0]\n",
      " [1 2 1]\n",
      " [0 1 2]]\n"
     ]
    }
   ],
   "source": [
    "A = np.array([\n",
    "    [ 2,  1,  0], \n",
    "    [ 1,  2,  1], \n",
    "    [ 0,  1,  2]])\n",
    "print(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "P, L, U = la.lu(A)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0.],\n",
       "       [0., 1., 0.],\n",
       "       [0., 0., 1.]])"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.        , 0.        , 0.        ],\n",
       "       [0.5       , 1.        , 0.        ],\n",
       "       [0.        , 0.66666667, 1.        ]])"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "L"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2.        , 1.        , 0.        ],\n",
       "       [0.        , 1.5       , 1.        ],\n",
       "       [0.        , 0.        , 1.33333333]])"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "U"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "[Note: LDU decomposition](https://stackoverflow.com/questions/45450175/is-there-a-built-in-easy-ldu-decomposition-method-in-numpy)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "A = np.array([\n",
    "    [ 2,  1,  0], \n",
    "    [ 1,  2,  1], \n",
    "    [ 0,  1,  2]])\n",
    "\n",
    "D  = np.diag(np.diag(U)) # D is just the diagonal of U\n",
    "U /= np.diag(U)[:, None] # Normalize rows of U"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2.        , 0.        , 0.        ],\n",
       "       [0.        , 1.5       , 0.        ],\n",
       "       [0.        , 0.        , 1.33333333]])"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "D"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.        , 0.5       , 0.        ],\n",
       "       [0.        , 1.        , 0.66666667],\n",
       "       [0.        , 0.        , 1.        ]])"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "U"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example 2 (Forward and backward)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$A\n",
    "= \\begin{bmatrix} 1 & 2 \\\\ 4 & 9 \\end{bmatrix}\n",
    "= \\begin{bmatrix} 1 & 0 \\\\ 4 & 1 \\end{bmatrix}\n",
    "  \\begin{bmatrix} 1 & 2 \\\\ 0 & 1 \\end{bmatrix}\n",
    "= LU\n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$Ax = b => \\begin{bmatrix} 1 & 2 \\\\ 4 & 9 \\end{bmatrix}\n",
    "            \\begin{bmatrix} x_1 \\\\ x_2 \\end{bmatrix}\n",
    "          = \\begin{bmatrix}  5 \\\\ 21 \\end{bmatrix}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$Lc = b \n",
    "=>\\begin{bmatrix} 1 & 0 \\\\ 4 & 1 \\end{bmatrix}\n",
    "  \\begin{bmatrix} c_1   \\\\ c_2 \\end{bmatrix}\n",
    "= \\begin{bmatrix} 5     \\\\ 21 \\end{bmatrix}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$Ux = c \n",
    "=>\\begin{bmatrix} 1 & 2 \\\\ 0 & 1 \\end{bmatrix}\n",
    "  \\begin{bmatrix} x_1   \\\\ x_2 \\end{bmatrix}\n",
    "= \\begin{bmatrix} c_1   \\\\ c_2 \\end{bmatrix}$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Nullspace"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Solve nullspace using SymPy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}1 & 1 & 2 & 3\\\\2 & 2 & 8 & 10\\\\3 & 3 & 10 & 13\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡1  1  2   3 ⎤\n",
       "⎢            ⎥\n",
       "⎢2  2  8   10⎥\n",
       "⎢            ⎥\n",
       "⎣3  3  10  13⎦"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = sm.Matrix([\n",
    "    [1, 1,  2,  3],\n",
    "    [2, 2,  8, 10],\n",
    "    [3, 3, 10, 13]\n",
    "])\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left [ \\left[\\begin{matrix}-1\\\\1\\\\0\\\\0\\end{matrix}\\right], \\quad \\left[\\begin{matrix}-1\\\\0\\\\-1\\\\1\\end{matrix}\\right]\\right ]$$"
      ],
      "text/plain": [
       "⎡⎡-1⎤  ⎡-1⎤⎤\n",
       "⎢⎢  ⎥  ⎢  ⎥⎥\n",
       "⎢⎢1 ⎥  ⎢0 ⎥⎥\n",
       "⎢⎢  ⎥, ⎢  ⎥⎥\n",
       "⎢⎢0 ⎥  ⎢-1⎥⎥\n",
       "⎢⎢  ⎥  ⎢  ⎥⎥\n",
       "⎣⎣0 ⎦  ⎣1 ⎦⎦"
      ]
     },
     "execution_count": 67,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.nullspace()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left ( \\left[\\begin{matrix}1 & 1 & 0 & 1\\\\0 & 0 & 1 & 1\\\\0 & 0 & 0 & 0\\end{matrix}\\right], \\quad \\left ( 0, \\quad 2\\right )\\right )$$"
      ],
      "text/plain": [
       "⎛⎡1  1  0  1⎤        ⎞\n",
       "⎜⎢          ⎥        ⎟\n",
       "⎜⎢0  0  1  1⎥, (0, 2)⎟\n",
       "⎜⎢          ⎥        ⎟\n",
       "⎝⎣0  0  0  0⎦        ⎠"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.rref()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}1 & 1 & 2 & 3\\\\0 & 0 & 4 & 4\\\\0 & 0 & 0 & 0\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡1  1  2  3⎤\n",
       "⎢          ⎥\n",
       "⎢0  0  4  4⎥\n",
       "⎢          ⎥\n",
       "⎣0  0  0  0⎦"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "U = sm.Matrix([\n",
    "    [1, 1, 2, 3],\n",
    "    [0, 0, 4, 4],\n",
    "    [0, 0, 0, 0]\n",
    "])\n",
    "U"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left [ \\left[\\begin{matrix}-1\\\\1\\\\0\\\\0\\end{matrix}\\right], \\quad \\left[\\begin{matrix}-1\\\\0\\\\-1\\\\1\\end{matrix}\\right]\\right ]$$"
      ],
      "text/plain": [
       "⎡⎡-1⎤  ⎡-1⎤⎤\n",
       "⎢⎢  ⎥  ⎢  ⎥⎥\n",
       "⎢⎢1 ⎥  ⎢0 ⎥⎥\n",
       "⎢⎢  ⎥, ⎢  ⎥⎥\n",
       "⎢⎢0 ⎥  ⎢-1⎥⎥\n",
       "⎢⎢  ⎥  ⎢  ⎥⎥\n",
       "⎣⎣0 ⎦  ⎣1 ⎦⎦"
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "U.nullspace()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example (Ch3; p146; Intro2LA 4ed; Gilbert Strang)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left[\\begin{matrix}1 & 3 & 0 & 2 & -1\\\\0 & 0 & 1 & 4 & -3\\\\1 & 3 & 1 & 6 & -4\\end{matrix}\\right]$$"
      ],
      "text/plain": [
       "⎡1  3  0  2  -1⎤\n",
       "⎢              ⎥\n",
       "⎢0  0  1  4  -3⎥\n",
       "⎢              ⎥\n",
       "⎣1  3  1  6  -4⎦"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = sm.Matrix([\n",
    "    [1, 3, 0, 2, -1],\n",
    "    [0, 0, 1, 4, -3],\n",
    "    [1, 3, 1, 6, -4]\n",
    "])\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left ( \\left[\\begin{matrix}1 & 3 & 0 & 2 & -1\\\\0 & 0 & 1 & 4 & -3\\\\0 & 0 & 0 & 0 & 0\\end{matrix}\\right], \\quad \\left ( 0, \\quad 2\\right )\\right )$$"
      ],
      "text/plain": [
       "⎛⎡1  3  0  2  -1⎤        ⎞\n",
       "⎜⎢              ⎥        ⎟\n",
       "⎜⎢0  0  1  4  -3⎥, (0, 2)⎟\n",
       "⎜⎢              ⎥        ⎟\n",
       "⎝⎣0  0  0  0  0 ⎦        ⎠"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.rref()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/latex": [
       "$$\\left [ \\left[\\begin{matrix}-3\\\\1\\\\0\\\\0\\\\0\\end{matrix}\\right], \\quad \\left[\\begin{matrix}-2\\\\0\\\\-4\\\\1\\\\0\\end{matrix}\\right], \\quad \\left[\\begin{matrix}1\\\\0\\\\3\\\\0\\\\1\\end{matrix}\\right]\\right ]$$"
      ],
      "text/plain": [
       "⎡⎡-3⎤  ⎡-2⎤  ⎡1⎤⎤\n",
       "⎢⎢  ⎥  ⎢  ⎥  ⎢ ⎥⎥\n",
       "⎢⎢1 ⎥  ⎢0 ⎥  ⎢0⎥⎥\n",
       "⎢⎢  ⎥  ⎢  ⎥  ⎢ ⎥⎥\n",
       "⎢⎢0 ⎥, ⎢-4⎥, ⎢3⎥⎥\n",
       "⎢⎢  ⎥  ⎢  ⎥  ⎢ ⎥⎥\n",
       "⎢⎢0 ⎥  ⎢1 ⎥  ⎢0⎥⎥\n",
       "⎢⎢  ⎥  ⎢  ⎥  ⎢ ⎥⎥\n",
       "⎣⎣0 ⎦  ⎣0 ⎦  ⎣1⎦⎦"
      ]
     },
     "execution_count": 77,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A.nullspace()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Solve nullspace using NumPy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 1,  1,  2,  3],\n",
       "       [ 2,  2,  8, 10],\n",
       "       [ 3,  3, 10, 13]])"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = np.array([\n",
    "    [1, 1,  2,  3],\n",
    "    [2, 2,  8, 10],\n",
    "    [3, 3, 10, 13]\n",
    "])\n",
    "A"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 3.        ,  3.        , 10.        , 13.        ],\n",
       "       [ 0.        ,  0.        ,  1.33333333,  1.33333333],\n",
       "       [ 0.        ,  0.        , -1.33333333, -1.33333333]])"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "P, L, U = la.lu(A)\n",
    "U"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[-0.33825438, -0.69683856],\n",
       "       [ 0.74489571,  0.21243911],\n",
       "       [ 0.40664134, -0.48439945],\n",
       "       [-0.40664134,  0.48439945]])"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "U = np.array([\n",
    "    [1, 1, 2, 3],\n",
    "    [0, 0, 4, 4],\n",
    "    [0, 0, 0, 0]\n",
    "])\n",
    "la.null_space(U)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
